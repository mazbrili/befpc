SubDir BEPASCAL_TOP source bepascal cpp ;

## OpenBeOS Generic Jamfile v1.0 ##

## Fill in this file to specify the project being created, and the referenced
## Jamfile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of the (Open)BeOS.

## Application Specific Settings ---------------------------------------------

# Specify the name of the binary
#	If the name has spaces, you must quote it: "My App"
NAME = libbepascal.so ;

# Specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE = SHARED ;

# Specify the source files to use
#	Full paths or paths relative to the Jamfile can be included.
# 	All files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this Jamfile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.
# Ex: SRCS = file1.cpp file2.cpp file3.cpp ;
SRCS = src/be/bepas_kernel/beobj.cpp 
       src/be/app/Application.cpp 
       src/be/app/Clipboard.cpp 
       src/be/app/Handler.cpp 
       src/be/app/Invoker.cpp 
       src/be/app/Looper.cpp 
       src/be/app/Message.cpp 
       src/be/app/Messenger.cpp 
       src/be/app/Roster.cpp 
       src/be/device/Joystick.cpp 
       src/be/device/SerialPort.cpp 
       src/be/interface/Alert.cpp 
       src/be/interface/Box.cpp 
       src/be/interface/Button.cpp
       src/be/interface/CheckBox.cpp 
       src/be/interface/Control.cpp 
       src/be/interface/Font.cpp 
       src/be/interface/ListItem.cpp 
       src/be/interface/ListView.cpp 
       src/be/interface/Menu.cpp 
       src/be/interface/MenuBar.cpp 
       src/be/interface/MenuItem.cpp 
       src/be/interface/OutlineListView.cpp 
       src/be/interface/Point.cpp 
       src/be/interface/Rect.cpp 
       src/be/interface/RadioButton.cpp 
       src/be/interface/ScrollBar.cpp 
       src/be/interface/ScrollView.cpp 
       src/be/interface/StatusBar.cpp 
       src/be/interface/StringView.cpp 
       src/be/interface/TabView.cpp 
       src/be/interface/TextControl.cpp 
       src/be/interface/TextView.cpp 
       src/be/interface/View.cpp 
       src/be/interface/Window.cpp 
       src/be/mail/E-mail.cpp 
       src/be/storage/Volume.cpp 
       src/be/storage/VolumeRoster.cpp 
       src/be/support/Archivable.cpp 
       src/be/support/DataIO.cpp 
       src/be/support/Flattenable.cpp 
       src/be/support/List.cpp 
       src/be/support/String.cpp
       src/hey/hey.cpp ;

# Specify the resource files to use
#	Full path or a relative path to the resource file can be used.
RSRCS =  ;

# Specify additional libraries to link against
#	There are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
LIBS = be mail device ;

# Specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the Jamfile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS =  ;

# Additional paths to look for system headers
#	These use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS = $(SEARCH_SOURCE)/include/be/app 
                       $(SEARCH_SOURCE)/include/be/bepas_kernel
                       $(SEARCH_SOURCE)/include/be/interface
                       $(SEARCH_SOURCE)/include/be/support
                       $(SEARCH_SOURCE)/include/hey ;

# Additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS = ;

# Specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE =  ;

# Specify any preprocessor symbols to be defined.  The symbols will not
#	have their values set automatically; you must supply the value (if any)
#	to use.  For example, setting DEFINES to "DEBUG=1" will cause the
#	compiler option "-DDEBUG=1" to be used.  Setting DEFINES to "DEBUG"
#	would pass "-DDEBUG" on the compiler's command line.
DEFINES =  ;

# Specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS =  ;

# Specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS =  ;

# Specify debug settings
#	if TRUE will allow application to be run from a source-level
#	debugger.  Note that this will disable all optimzation.
DEBUGGER =  ;

# Specify additional compiler flags for all files
COMPILER_FLAGS =  ;

# Specify additional linker flags
LINKER_FLAGS =  ;

# (for TYPE == DRIVER only) Specify desired location of driver in the /dev
#	hierarchy. Used by the driverinstall rule. E.g., DRIVER_PATH = video/usb will
#	instruct the driverinstall rule to place a symlink to your driver's binary in
#	~/add-ons/kernel/drivers/dev/video/usb, so that your driver will appear at
#	/dev/video/usb when loaded. Default is "misc".
DRIVER_PATH =  ;

## Include the Jamfile-engine
include $(BUILDHOME)/etc/Jamfile-engine ;
